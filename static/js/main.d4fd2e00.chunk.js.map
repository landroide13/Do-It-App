{"version":3,"sources":["reducers/DoitReducer.js","context/DoitContext.js","components/Nav.js","components/NewDoitForm.js","components/Doit.js","components/DoitList.js","App.js","serviceWorker.js","index.js"],"names":["DoitReducer","state","action","type","concat","Object","toConsumableArray","title","doit","coment","id","uuid","filter","DoitContext","createContext","DoitContextProvider","props","_useReducer","useReducer","data","localStorage","getItem","JSON","parse","_useReducer2","slicedToArray","doits","dispatch","useEffect","setItem","stringify","react_default","a","createElement","Provider","value","children","Nav","useContext","className","href","class","length","NewDoitForm","_useState","useState","_useState2","setTitle","_useState3","_useState4","setComent","onSubmit","e","preventDefault","placeholder","onChange","target","required","Doit","_ref","data-badge-caption","onClick","DoitList","map","components_Doit","key","App","context_DoitContext","components_Nav","components_NewDoitForm","components_DoitList","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d4fd2e00.chunk.js","sourcesContent":["import uuid from 'uuid';\n\nexport const DoitReducer = (state, action) => {\n  switch(action.type){\n    case 'ADD':\n      return [...state, { title: action.doit.title, coment: action.doit.coment, id: uuid() }]\n    case 'REMOVE':\n      return state.filter(doit => doit.id !== action.id)\n    default:\n      return state    \n  }\n}","import React, { createContext, useEffect, useReducer } from 'react';\nimport { DoitReducer } from '../reducers/DoitReducer';\n\nexport const DoitContext = createContext();\n\nconst DoitContextProvider = (props) => {\n\n  const [doits, dispatch] = useReducer(DoitReducer, [], () => {\n    const data = localStorage.getItem('doits');\n    return data ? JSON.parse(data) : []\n  })\n\n  useEffect(() => {\n    localStorage.setItem('doits', JSON.stringify(doits))\n  }, [doits])\n\n  return (\n\n    <DoitContext.Provider value={{ doits, dispatch }}>\n      { props.children }\n    </DoitContext.Provider>\n\n    );\n\n}\n \nexport default DoitContextProvider;\n\n\n\n\n\n\n\n\n\n\n\n","import React, { useContext, } from 'react';\nimport { DoitContext } from '../context/DoitContext';\n\nconst Nav = (props) => {\n\n  const { doits } = useContext(DoitContext);\n\n  return (\n\n    <nav className=\"blue lighten-3\">\n      <div className=\"nav-wrapper container\">\n        <a href=\"#\" className=\"brand-logo left\">Do-IT's List</a>\n        <ul id=\"nav-mobile\" className=\"right hide-on-med-and-down\">\n          <li><a href=\"#\">You have <span class=\"new badge\">{doits.length}</span> unaccomplished tasks</a></li>\n        </ul>\n      </div>\n    </nav> \n   );\n\n}\n \nexport default Nav;\n","import React, { useState, useContext } from 'react'\nimport { DoitContext } from '../context/DoitContext';\n\nconst NewDoitForm = () => {\n\n  const { dispatch } = useContext(DoitContext);\n\n  const [title, setTitle] = useState('');\n  const [coment, setComent] = useState('');\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    dispatch({ type: 'ADD', doit: {title, coment}})\n    setTitle('');\n    setComent('');\n  }\n\n\n  return ( \n    <form className=\"card-panel blue lighten-5\" onSubmit={handleSubmit}>\n      <div class=\"input-field\">\n        <input type=\"text\" placeholder=\"Title\" value={title} onChange={e => setTitle(e.target.value)} required />\n      </div>  \n      <div class=\"input-field\">\n        <input type=\"text\" placeholder=\"Comment\" value={coment} onChange={e => setComent(e.target.value)} />\n      </div>\n\n      <button className=\"btn\" type=\"submit\" value=\"Add Doit\">Add Doit</button>\n    </form>\n   );\n\n}\n \nexport default NewDoitForm;\n","import React, { useContext } from 'react';\nimport { DoitContext } from '../context/DoitContext';\n\n\nconst Doit = ({ doit }) => {\n\n  const { dispatch } = useContext(DoitContext);\n\n  return ( \n    <li>\n      <div className=\"collapsible-header\">\n        <i className=\"material-icons\">filter_drama</i>{ doit.title }: { doit.coment }\n      <span className=\"badge red new\" data-badge-caption=\"Remove\" onClick={() => dispatch({ type: 'REMOVE', id: doit.id })} ></span></div>\n    </li>\n   );\n\n}\n \nexport default Doit;\n","import React, { useContext } from 'react';\nimport Doit from './Doit';\nimport { DoitContext } from '../context/DoitContext';\n\n\nconst DoitList = () => {\n\n  const { doits } = useContext(DoitContext);\n\n  return doits.length ? (\n    <div>\n      <ul className=\"collapsible\"> \n        { doits.map(doit => {\n          return <Doit key={doit.id} doit={doit} />\n        })}\n      </ul>\n    </div>\n    ) : (\n      <div>\n        <h3>No pending tasks <i className=\"material-icons medium\">sentiment_satisfied</i></h3>\n      </div>\n    );\n\n}\n \nexport default DoitList;\n","import React from 'react';\nimport DoitContextProvider from './context/DoitContext';\nimport Nav from './components/Nav';\nimport NewDoitForm from './components/NewDoitForm';\nimport DoitList from './components/DoitList';\n\n// npm add @babel/runtime\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <DoitContextProvider>\n        <Nav />\n        <div className=\"row container\">\n          <div className=\"col s6 top50\">\n            <NewDoitForm />\n          </div>\n          <div className=\"col s6 top50\">\n          <DoitList />\n          </div>\n        </div>  \n      </DoitContextProvider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}